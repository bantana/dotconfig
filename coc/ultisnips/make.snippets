# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet make "Makefile" b
# the compiler: gcc for C program, define as g++ for C++
CC = clang

# compiler flags:
#  -g    adds debugging information to the executable file
#  -Wall turns on most, but not all, compiler warnings
CFLAGS  = -std=c11 -g -Wall
# UNAME_S := $(shell uname -s)
# ifeq ($(UNAME_S),Linux)
# 	CFLAGS += -lbsd
# endif
# ifeq ($(UNAME_S),Darwin)        # Mac OS X
#     CFLAGS += -D OSX
# endif
MKDIR_P := mkdir -p
BUILD_DIR  = .build
# the build target executable:
TARGET = ${1}

.PHONY: directories all clean


all: directories $(TARGET)

directories: $(BUILD_DIR)

$(BUILD_DIR):
	$(MKDIR_P) $(BUILD_DIR)

$(TARGET): $(TARGET).c
	$(CC) $(CFLAGS) -o $(BUILD_DIR)/$(TARGET) $(TARGET).c

run: all
	$(BUILD_DIR)/$(TARGET) $(ARGS)

dot: directories
	find . -name '*.c' > $(BUILD_DIR)/cscope.files
	cd $(BUILD_DIR); cscope -b -c ../*.c; tceetree; dot -Tpng -O tceetree.out; open tceetree.out.png

valgrind:
	valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes $(BUILD_DIR)/$(TARGET)

clean:
	$(RM) -rf $(BUILD_DIR)
endsnippet
snippet cplus "Description" b
# the compiler: gcc for C program, define as g++ for C++
CC = clang++

# compiler flags:
#  -g    adds debugging information to the executable file
#  -Wall turns on most, but not all, compiler warnings
CFLAGS  = -std=c++11 -g -Wall
# UNAME_S := $(shell uname -s)
# ifeq ($(UNAME_S),Linux)
# 	CFLAGS += -lbsd
# endif
# ifeq ($(UNAME_S),Darwin)        # Mac OS X
#     CFLAGS += -D OSX
# endif
MKDIR_P := mkdir -p
BUILD_DIR  = .build
# the build target executable:
TARGET = ${1}

.PHONY: directories all clean


all: directories $(TARGET)

directories: $(BUILD_DIR)

$(BUILD_DIR):
	$(MKDIR_P) $(BUILD_DIR)

$(TARGET): $(TARGET).cpp
	$(CC) $(CFLAGS) -o $(BUILD_DIR)/$(TARGET) $(TARGET).cpp

run: all
	$(BUILD_DIR)/$(TARGET) $(ARGS)

dot: directories
	find . -name '*.cpp' > $(BUILD_DIR)/cscope.files
	cd $(BUILD_DIR); cscope -b -c ../*.cpp; tceetree; dot -Tpng -O tceetree.out; open tceetree.out.png

valgrind:
	valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes $(BUILD_DIR)/$(TARGET)

clean:
	$(RM) -rf $(BUILD_DIR)

endsnippet

snippet makefile "makefile" b
# the compiler: gcc for C program, define as g++ for C++
CC = gcc

# compiler flags:
#  -g    adds debugging information to the executable file
#  -Wall turns on most, but not all, compiler warnings
CFLAGS  = -g -Wall

# the build target executable:
TARGET = myprog

all: $(TARGET)

$(TARGET): $(TARGET).c
	$(CC) $(CFLAGS) -o $(TARGET) $(TARGET).c

clean:
	$(RM) $(TARGET)
endsnippet
