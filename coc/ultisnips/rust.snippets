# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet ret "return ...;" b
return ${1};
${0}
endsnippet
snippet vec! "vec![,,,]" A
vec![${1}]${0}
endsnippet
snippet panic! "panic!(...);" A
panic!("$1"${2/..*/, /}$2)${0}
endsnippet
snippet fnm "fn main() {}" A
fn main() {
	${1}
}
${0}
endsnippet
snippet aseq! "assert_eq!( , );" A
assert_eq!(${1}, ${2});
${0}
endsnippet
snippet months "months name"
let months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "Junly",
    "August",
    "September",
    "October",
    "November",
    "December",
];
endsnippet
snippet structopt "structopt example" e
use std::path::PathBuf;
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
#[structopt(name = "example", about = "An example of StructOpt usage.")]
struct Opt {
	/// Activate debug mode
	// short and long flags (-d, --debug) will be deduced from the field's name
	#[structopt(short, long)]
	debug: bool,

	/// Set speed
	// we don't want to name it "speed", need to look smart
	#[structopt(short = "v", long = "velocity", default_value = "42")]
	speed: f64,
}
endsnippet
